name: Build and Pack

on: [push, pull_request]

jobs:
#########################################################################################
## Build Firmware
#########################################################################################
  build:
    runs-on: ubuntu-latest

    steps:
    - id: skip_check
      uses: fkirc/skip-duplicate-actions@v5
      with:
        concurrent_skipping: same_content_newer
    
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set Variables
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Cache PIP
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Use Build Cache
      uses: actions/cache@v3
      with:
        path: ./code/.pio/
        key: ${{ runner.os }}-pio-${{ github.ref_name }}

    - name: Build Firmware
      #run: echo "Testing... ${{ github.ref_name }}, ${{ steps.vars.outputs.sha_short }}" > ./sd-card/html/version.txt; mkdir -p ./code/.pio/build/esp32cam/; cd ./code/.pio/build/esp32cam/; echo "${{ steps.vars.outputs.sha_short }}" > firmware.bin; cp firmware.bin partitions.bin; cp firmware.bin bootloader.bin # Testing
      run: cd code; platformio run --environment esp32cam

    - name: Set Hash in all Web UI files
      run: cd sd-card/html; find . -type f -exec sed -i 's/$COMMIT_HASH/${{ steps.vars.outputs.sha_short }}/g' {} \;


    - name: Store generated files in cache
      uses: actions/cache@v3
      with:
        path: |
          ./code/.pio/build/esp32cam/firmware.bin
          ./code/.pio/build/esp32cam/partitions.bin
          ./code/.pio/build/esp32cam/bootloader.bin
          ./sd-card/html/*
        key: ${{ github.run_number }}


#########################################################################################
## Pack for Update
#########################################################################################
  pack-for-update:
    # New OTA concept
    # update__version.zip file with following content:
    #  - /firmware.bin
    #  - (optional) /html/*
    #  - (optional) /config/*.tfl
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v3

    - name: Get generated files from cache
      uses: actions/cache@v3
      with:
        path: |
          ./code/.pio/build/esp32cam/firmware.bin
          ./code/.pio/build/esp32cam/partitions.bin
          ./code/.pio/build/esp32cam/bootloader.bin
          ./sd-card/html/*
        key: ${{ github.run_number }}

    - name: Set Variables
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "branch=$(echo ${{ github.ref_name }} | tr / __)" >> $GITHUB_OUTPUT

    - name: Prepare update__*.zip artifact
      run: |
        mkdir -p ./update
        cp "./code/.pio/build/esp32cam/firmware.bin" "update/firmware.bin"

    - name: Add Web UI to update
      run: cp -r ./sd-card/html ./update/

    - name: Add CNN to update
      run: |
        mkdir ./update/config/
        cp ./sd-card/config/*.tfl ./update/config/ 2>/dev/null || true
        cp ./sd-card/config/*.tflite ./update/config/ 2>/dev/null || true

    - name: Upload update as update.zip artifact (Firmware + Web UI + CNN)
      uses: actions/upload-artifact@v3
      with:
        name: "AI-on-the-edge-device__update__${{ steps.vars.outputs.branch }}_(${{ steps.vars.outputs.sha_short }})"
        path: ./update/*

    - name: Store generated files in cache
      uses: actions/cache@v3
      with:
        path: update
        key: ${{ github.run_number }}-update


#########################################################################################
## Pack for Remote Setup 
#########################################################################################
  pack-for-remote_setup:
    # New Remote Setup concept
    # remote_setup__version.zip file with following content:
    #  - /firmware.bin
    #  - /html/*
    #  - /config/*
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v3

    - name: Get generated files from cache
      uses: actions/cache@v3
      with:
        path: |
          ./code/.pio/build/esp32cam/firmware.bin
          ./code/.pio/build/esp32cam/partitions.bin
          ./code/.pio/build/esp32cam/bootloader.bin
          ./sd-card/html/*
        key: ${{ github.run_number }}

    - name: Set Variables
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "branch=$(echo ${{ github.ref_name }} | tr / __)" >> $GITHUB_OUTPUT

    - name: Prepare remote_setup__*.zip artifact
      run: |
        mkdir -p ./remote_setup
        cp "./code/.pio/build/esp32cam/firmware.bin" "remote_setup/firmware.bin"

    - name: Add Web UI to remote_setup
      run: cp -r ./sd-card/html ./remote_setup/

    - name: Add whole config folder to remote_setup
      run: |
        mkdir ./remote_setup/config/
        cp ./sd-card/config/* ./remote_setup/config/ 2>/dev/null || true

    - name: Upload remote_setup as remote_setup.zip artifact (Firmware + Web UI + Config)
      uses: actions/upload-artifact@v3
      with:
        name: "AI-on-the-edge-device__remote-setup__${{ steps.vars.outputs.branch }}_(${{ steps.vars.outputs.sha_short }})"
        path: ./remote_setup/*

    - name: Store generated files in cache
      uses: actions/cache@v3
      with:
        path: remote_setup
        key: ${{ github.run_number }}-remote_setup


#########################################################################################
## Pack for a fresh install (USB flashing) (manual_setup)
#########################################################################################
  pack-for-manual_setup:
    # creates old style binaries for fresh installation (backward compatible to wiki)
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v3

    - name: Get generated files from cache
      uses: actions/cache@v3
      with:
        path: |
          ./code/.pio/build/esp32cam/firmware.bin
          ./code/.pio/build/esp32cam/partitions.bin
          ./code/.pio/build/esp32cam/bootloader.bin
          ./sd-card/html/*
        key: ${{ github.run_number }}

    - name: Set Variables
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "branch=$(echo ${{ github.ref_name }} | tr / __)" >> $GITHUB_OUTPUT

    - name: Prepare manual_setup__*.zip artifact
      run: |
        mkdir -p manual_setup
        rm -rf manual_setup/*.zip
        mkdir -p release
        # copy builds to manual_setup folder
        cp -f "./code/.pio/build/esp32cam/firmware.bin" "manual_setup/firmware.bin"
        cp -f "./code/.pio/build/esp32cam/bootloader.bin" "manual_setup/bootloader.bin"
        cp -f "./code/.pio/build/esp32cam/partitions.bin" "manual_setup/partitions.bin"
        zip -r ./manual_setup/sd-card.zip sd-card
        cd ./manual_setup
  
    - name: Upload manual_setup.zip artifact (Firmware + Bootloader + Partitions + Web UI)
      uses: actions/upload-artifact@v3
      with:
        name: "AI-on-the-edge-device__manual-setup__${{ steps.vars.outputs.branch }}_(${{ steps.vars.outputs.sha_short }})"
        path: ./manual_setup

    - name: Store generated files in cache
      uses: actions/cache@v3
      with:
        path: manual_setup
        key: ${{ github.run_number }}-manual_setup


#########################################################################################
## Prepare and create release
#########################################################################################
  release: 
    runs-on: ubuntu-latest
    needs: [pack-for-update, pack-for-manual_setup, pack-for-remote_setup]
    if: startsWith(github.ref, 'refs/tags/') 
      
    steps:
    - uses: actions/checkout@v3

    # import update
    - name: Get generated update files from cache
      uses: actions/cache@v3
      with:
        path: update
        key: ${{ github.run_number }}-update

    # import remote_setup
    - name: Get generated files from cache
      uses: actions/cache@v3
      with:
        path: remote_setup
        key: ${{ github.run_number }}-remote_setup

    # import manual_setup
    - name: Get generated files from cache
      uses: actions/cache@v3
      with:
        path: manual_setup
        key: ${{ github.run_number }}-manual_setup

    - name: Set Variables
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "branch=$(echo ${{ github.ref_name }} | tr / __)" >> $GITHUB_OUTPUT

    - name: Prepare artifacts for release
      run: |
        mkdir -p release

        # create AI-on-the-edge-device__update__*.zip like "AI-on-the-edge-device__update__v13.0.5.zip"
        cd ./update
        zip -r ../release/AI-on-the-edge-device__update__${{ steps.vars.outputs.branch }}.zip .

        # create AI-on-the-edge-device__manual-setup__*.zip like "AI-on-the-edge-device__manual-setup__v13.0.5.zip"
        cd ../manual_setup
        zip -r ../release/AI-on-the-edge-device__manual-setup__${{ steps.vars.outputs.branch }}.zip .

        # create AI-on-the-edge-device__remote-setup__*.zip like "AI-on-the-edge-device__remote-setup__v13.0.5.zip"
        cd ../manual_setup
        zip -r ../release/AI-on-the-edge-device__remote-setup__${{ steps.vars.outputs.branch }}.zip .

    # extract the version used in next step
    - id: get_version
      if: startsWith(github.ref, 'refs/tags/') 
      uses: battila7/get-version-action@v2

    # the changelog [unreleased] will now be changed to the release version
    - name: Update changelog
      uses: thomaseizinger/keep-a-changelog-new-release@v1
      if: startsWith(github.ref, 'refs/tags/') 
      with:
        changelogPath: Changelog.md
        version: ${{ steps.get_version.outputs.version-without-v }}
            
    # the release notes will be extracted from changelog 
    - name: Extract release notes
      id: extract-release-notes
      if: startsWith(github.ref, 'refs/tags/') 
      uses: ffurrer2/extract-release-notes@v1
      with:
          changelog_file: Changelog.md
          

    # Releases should only be created on master by tagging the last commit.
    # all artifacts in firmware folder pushed to the release
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        name:  ${{ steps.get_version.outputs.version-without-v }}
        body: ${{ steps.extract-release-notes.outputs.release_notes }}
        files: |
          release/*

    # Commit&Push Changelog to master branch. Must be manually merged back to rolling
    - name: Commit changes and push changes
      if: startsWith(github.ref, 'refs/tags/') 
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add Changelog.md
        git commit Changelog.md -m "Update Changelog.md for ${{github.event.inputs.versionIncrement}} release"
        git push origin HEAD:master


#########################################################################################
## Update the Web Installer on a release
#########################################################################################
  update-web-installer:
    needs: [release]

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # import update
    - name: Get generated update files from cache
      uses: actions/cache@v3
      with:
        path: update
        key: ${{ github.run_number }}-update

    - name: Set Variables
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "branch=$(echo ${{ github.ref_name }} | tr / __)" >> $GITHUB_OUTPUT

    - name: Add binary to Web Installer and update manifest
      run: |
        rm -f docs/binary/firmware.bin
        cp -f update/firmware.bin docs/binary/firmware.bin
        cp -f docs/manifest_template.json docs/manifest.json
        sed -i 's/VERSION/${{ steps.vars.outputs.branch }}/g' docs/manifest.json

    - name: Setup Pages
      uses: actions/configure-pages@v2

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: 'docs'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v1
